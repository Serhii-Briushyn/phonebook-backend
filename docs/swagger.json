{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "PhoneBook API",
    "description": "API documentation for the Contacts application. Manage user contacts and authentication, including endpoints for creating, retrieving, updating, and deleting contacts.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "https://phonebook-backend-orpb.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Contacts",
      "description": "Manage user contacts: create, retrieve, update, and delete."
    },
    {
      "name": "Auth",
      "description": "Authentication and token management endpoints."
    }
  ],
  "paths": {
    "/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get all contacts",
        "operationId": "getContacts",
        "description": "Get all user contacts.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Page number for pagination.",
            "schema": {
              "type": "integer",
              "example": 1,
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "perPage",
            "description": "Number of contacts per page.",
            "schema": {
              "type": "integer",
              "example": 10,
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "description": "Sort results by a field.",
            "schema": {
              "type": "string",
              "enum": [
                "_id",
                "name",
                "phoneNumber",
                "email",
                "isFavorite",
                "contactType",
                "createdAt",
                "updatedAt"
              ],
              "example": "name",
              "default": "_id"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "Sorting order.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "example": "asc",
              "default": "asc"
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "Filter by contact type.",
            "schema": {
              "type": "string",
              "enum": [
                "work",
                "home",
                "personal"
              ],
              "example": "work"
            }
          },
          {
            "in": "query",
            "name": "isFavorite",
            "description": "Filter by favorite status.",
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user contact list.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found contacts!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasPreviousPage",
                        "hasNextPage"
                      ],
                      "properties": {
                        "data": {
                          "type": "array",
                          "description": "List of contacts matching filters, sorted, and paginated.",
                          "items": {
                            "$ref": "#/components/schemas/contact"
                          }
                        },
                        "page": {
                          "type": "number",
                          "description": "Current page number.",
                          "example": 1
                        },
                        "perPage": {
                          "type": "number",
                          "description": "Number of contacts per page.",
                          "example": 10
                        },
                        "totalItems": {
                          "type": "number",
                          "description": "Total number of contacts matching the filters.",
                          "example": 15
                        },
                        "totalPages": {
                          "type": "number",
                          "description": "Total number of pages.",
                          "example": 2
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "description": "Indicates if there is a previous page.",
                          "example": false
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "description": "Indicates if there is a next page.",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create contact",
        "operationId": "createContact",
        "description": "Create a new contact.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "phoneNumber",
                  "contactType"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Full name of the contact.",
                    "example": "John Doe"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "description": "Contact's phone number.",
                    "example": "+123456789"
                  },
                  "email": {
                    "type": "string",
                    "description": "Contact's email address.",
                    "example": "johndoe@example.com"
                  },
                  "isFavorite": {
                    "type": "boolean",
                    "description": "Mark contact as favorite.",
                    "example": true
                  },
                  "contactType": {
                    "type": "string",
                    "description": "Type of contact.",
                    "enum": [
                      "work",
                      "home",
                      "personal"
                    ],
                    "example": "personal"
                  },
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "Contact's photo file."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created contact.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a contact!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/contact"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/contacts/{contactId}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get contact by id",
        "operationId": "getContact",
        "description": "Get a contact by its ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "description": "Unique ID of the contact to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "674c7ea11a75750f5f9b86d4"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user contact by ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found contact with ID 674c7ea11a75750f5f9b86d4!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/contact"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Contacts"
        ],
        "summary": "Update a contact",
        "operationId": "updateContact",
        "description": "Update a contact by its ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "description": "Unique ID of the contact to update.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "674c7ea11a75750f5f9b86d4"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to update. Provide at least one field.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Full name of the contact.",
                    "example": "John Doe"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "description": "Contact's phone number.",
                    "example": "+123456789"
                  },
                  "email": {
                    "type": "string",
                    "description": "Contact's email address.",
                    "example": "johndoe@example.com"
                  },
                  "isFavorite": {
                    "type": "boolean",
                    "description": "Mark contact as favorite.",
                    "example": true
                  },
                  "contactType": {
                    "type": "string",
                    "description": "Type of contact.",
                    "enum": [
                      "work",
                      "home",
                      "personal"
                    ],
                    "example": "personal"
                  },
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "Contact's photo file."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated contact.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully patched a contact!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/contact"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete a contact",
        "operationId": "deleteContact",
        "description": "Delete a contact by its ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "description": "Unique ID of the contact to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "674c7ea11a75750f5f9b86d4"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted contact. No content returned."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new user",
        "operationId": "registerUser",
        "description": "Registers a new user with a unique email and hashed password.",
        "security": [],
        "requestBody": {
          "description": "User registration data.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "User's full name.",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address.",
                    "example": "johndoe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "User's password.",
                    "example": "SecurePass123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully user registration.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/user"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User login",
        "operationId": "loginUser",
        "description": "Logs in a user with valid credentials.",
        "security": [],
        "requestBody": {
          "description": "User credentials for login.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address.",
                    "example": "johndoe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "User's password.",
                    "example": "SecurePass123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully user logged.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "Access token.",
                          "example": "pJK+TbhNzRIz1BVL9rf4JXrvuYM4ecbdaoRf+22v"
                        },
                        "user": {
                          "$ref": "#/components/schemas/user"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh user session",
        "operationId": "refreshUserSession",
        "description": "Refreshes the user session and generates a new access token.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Refresh token and session ID.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "sessionId",
                  "refreshToken"
                ],
                "properties": {
                  "sessionId": {
                    "type": "string",
                    "description": "ID of the current user session.",
                    "example": "674c7ea11a75750f5f9b86d4"
                  },
                  "refreshToken": {
                    "type": "string",
                    "description": "Valid refresh token for session renewal.",
                    "example": "pJK+TbhNzRIz1BVL9rf4JXrvuYM4ecbdaoRf+22v"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully refreshed user session.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "Access token.",
                          "example": "pJK+TbhNzRIz1BVL9rf4JXrvuYM4ecbdaoRf+22v"
                        },
                        "user": {
                          "$ref": "#/components/schemas/user"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User logout",
        "operationId": "logoutUser",
        "description": "Logs the user out of the system.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "cookie",
            "name": "sessionId",
            "description": "ID of the current user session.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "674c7ea11a75750f5f9b86d4"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully user logout. No content returned."
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP error status.",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "General error name.",
                      "example": "BadRequestError"
                    },
                    "data": {
                      "type": "object",
                      "description": "Details about the error.",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Session ID is required"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/send-reset-email": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Send reset password email",
        "operationId": "sendResetPasswordEmail",
        "description": "Sends an email with a password reset link.",
        "security": [],
        "requestBody": {
          "description": "Email of the user requesting a password reset.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address.",
                    "example": "johndoe@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully sent password reset email.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "message",
                    "status",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Reset password email was successfully sent!"
                    },
                    "data": {
                      "type": "object",
                      "example": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/reset-pwd": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset user password",
        "operationId": "resetPassword",
        "description": "Resets the user's password using a valid reset token and new password.",
        "security": [],
        "requestBody": {
          "description": "Reset token and new password.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "password"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Reset token.",
                    "example": "eyJhbGciOiJIUzI2NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2NzRjMmY1NGQyZmJhYjI4NTUxZDQ1ZWQiLCJlbWFpbCI6InNlcmhpaS5icml1c2h5bkBpY2xvdWQuY29tIiwiaWF0IjoxNzM0NjkwMzc4LCJleHAiOjE3MzQ2OTA2Nzh9.H-S6dnxmHxx5ypF69JfmCEhyWjyxETzN3Sn4jCFxr-8"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "New user's password.",
                    "example": "NewStrongPassword123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated password.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Password was successfully reset!"
                    },
                    "data": {
                      "type": "object",
                      "example": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/get-oauth-url": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get Google OAuth URL",
        "operationId": "getGoogleOAuthUrl",
        "description": "Generates and returns the Google OAuth URL for user authorization.",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved Google OAuth URL.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully get Google OAuth url!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "Google OAuth 2.0 authorization URL.",
                          "example": "https://accounts.google.com/o/oauth2/v2/auth?client_id=YOUR_CLIENT_ID&redirect_uri=YOUR_REDIRECT_URI&scope=email%20profile&response_type=code"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/confirm-oauth": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registration or login via Google OAuth.",
        "operationId": "loginWithGoogle",
        "description": "Logs in an existing user or registers a new user using Google OAuth 2.0.",
        "security": [],
        "requestBody": {
          "description": "Authorization code provided by Google OAuth 2.0",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Authorization code.",
                    "example": "pJK+TbhNzRIz1BVL9rf4JXrvuYM4ecbdaoRf+22v"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in or registered via Google OAuth.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in via Google OAuth!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "Access token.",
                          "example": "pJK+TbhNzRIz1BVL9rf4JXrvuYM4ecbdaoRf+22v"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "contact": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "phoneNumber",
          "contactType",
          "userId",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique ID of the contact.",
            "example": "674c7ea11a75750f5f9b86d4"
          },
          "name": {
            "type": "string",
            "description": "Full name of the contact.",
            "example": "John Doe"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Contact's phone number.",
            "example": "+123456789"
          },
          "email": {
            "type": "string",
            "description": "Contact's email address.",
            "example": "johndoe@example.com"
          },
          "isFavorite": {
            "type": "boolean",
            "description": "Marks contact as favorite.",
            "example": true
          },
          "contactType": {
            "type": "string",
            "description": "Type of contact.",
            "enum": [
              "work",
              "home",
              "personal"
            ],
            "example": "personal"
          },
          "userId": {
            "type": "string",
            "description": "Unique ID of the contact's owner.",
            "example": "674dc213e880c5a6c4e30b19"
          },
          "photo": {
            "type": "string",
            "description": "Contact's photo URL.",
            "example": "https://res.cloudinary.com/uqwgdu/image/upload/default.png"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the contact was created (ISO 8601).",
            "example": "2024-12-01T12:34:56Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the contact was last updated (ISO 8601).",
            "example": "2024-12-02T08:15:30Z"
          }
        }
      },
      "user": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "User's unique ID.",
            "example": "674c7ea11a75750f5f9b86d4"
          },
          "name": {
            "type": "string",
            "description": "User's full name.",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "User's email address.",
            "example": "johndoe@example.com"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was created (ISO 8601).",
            "example": "2024-12-01T12:34:56Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was last updated (ISO 8601).",
            "example": "2024-12-02T08:15:30Z"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad request due to invalid request body, incorrect contact ID format, or missing required session ID.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "description": "HTTP error status.",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "description": "General error name.",
                  "example": "BadRequestError"
                },
                "data": {
                  "type": "object",
                  "description": "Details about the error.",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Detailed error explanation.",
                      "oneOf": [
                        {
                          "example": "Invalid request body"
                        },
                        {
                          "example": "Invalid contact ID format"
                        },
                        {
                          "example": "Session ID is required"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized access due to invalid or expired token, missing Authorization header, or session-related issues.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "description": "HTTP error status.",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "description": "General error name.",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "description": "Details about the error.",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Detailed error explanation.",
                      "oneOf": [
                        {
                          "example": "Access token expired"
                        },
                        {
                          "example": "Please provide Authorization header"
                        },
                        {
                          "example": "Auth header should be of type Bearer"
                        },
                        {
                          "example": "Session not found"
                        },
                        {
                          "example": "User not found"
                        },
                        {
                          "example": "Unauthorized"
                        },
                        {
                          "example": "Session token expired"
                        },
                        {
                          "example": "Token is invalid or expired"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Resource not found due to an invalid route, missing user, or missing contact in the system.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "description": "HTTP error status.",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "description": "General error name.",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "description": "Details about the error.",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Detailed error explanation.",
                      "oneOf": [
                        {
                          "example": "Contact not found"
                        },
                        {
                          "example": "Route not found"
                        },
                        {
                          "example": "User not found"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict due to a resource already existing or conflicting with current state.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "description": "HTTP error status.",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "description": "General error name.",
                  "example": "ConflictError"
                },
                "data": {
                  "type": "object",
                  "description": "Details about the error.",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Detailed error explanation.",
                      "example": "Email in use"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "error"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "description": "HTTP error status.",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "description": "General error name.",
                  "example": "Something went wrong"
                },
                "error": {
                  "type": "string",
                  "description": "Detailed explanation of the server-side error.",
                  "example": "Internal server error"
                }
              }
            }
          }
        }
      }
    }
  }
}